
////////////////////////////////////////////////////////////////////////////////////////////////
// Windows
////////////////////////////////////////////////////////////////////////////////////////////////
How to setup globular developement environnement on windows.

first of all install Go 1.17

https://golang.org/dl/

Test if go is correctly install with 
go version
> go version go1.17 windows/amd64

Now create a dir name globulario

mkdir globulario
cd globulario

Clone git pojet,
git clone https://github.com/globulario/services.git
git clone https://github.com/globulario/Globular.git
git clone https://github.com/davecourtois/Utility.git

Now I will compile the services. The first step is to generate gRpc files.
To do so you must have gRpc installed on your computer. (I will not explain how to install it here).

You will aslo need language specific code generator to generate globular grpc files,

Go
For go simply run,
go get -u google.golang.org/protobuf/cmd/protoc-gen-go
go install google.golang.org/protobuf/cmd/protoc-gen-go
go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc

Typescript

Download protoc-gen-grpc-web.exe for the platform you need. Put the exec in the bin path rename it from original name to protoc-gen-grpc-web.exe


Generate gRpc stub...

if you are in a linux shell simply run command 
sh generateCode.sh

otherwise copy all the generateCode.sh and paste it in a command prompt, it will run all command one after another.

C# and C++ generator must be compile from source code, I will not define how to do it but I successfully compile it with msys2 on windows.

Now to compile golang services 
cd golang
go mod tidy
sh build.sh


Now globular from globulario dir,
cd Globular
go mod tidy
go build

Et voila you got a working globular executable and services!

////////////////////////////////////////////////////////////////////////////////////////////////
// Raspberry Pie
////////////////////////////////////////////////////////////////////////////////////////////////
Here is a detail version on how to do the same thing on a raspberry pi4
There is the setup of the development environnement for a raspery pi.

install required tools and libraries.
Git
    sudo apt install git-all

Go
    sudo apt install net-tools
    sudo apt-get update
    sudo apt-get -y upgrade

    mkdir temp
    cd temp/
    wget https://golang.org/dl/go1.16.7.linux-arm64.tar.gz
    sudo tar -xvf go1.16.7.linux-arm64.tar.gz
    sudo mv go /usr/local/
    
    sudo nano ~/.bashrc
    
    modify the path,
    
    export GOROOT=/usr/local/go
    export GOPATH=$HOME/go
    export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

SQL driver
    sudo apt-get install build-essential
    sudo wget http://www.unixodbc.org/unixODBC-2.3.9.tar.gz
    sudo tar -xvf unixODBC-2.3.9.tar.gz
    cd unixODBC-2.3.9/
    sudo ./configure
    sudo make all install clean
    sudo ldconfg

Xapian
    sudo wget https://oligarchy.co.uk/xapian/1.4.18/xapian-core-1.4.18.tar.xz
    sudo tar -xvf xapian-core-1.4.18.tar.xz
    cd xapian-core-1.4.18
    ./configure
    sudo make all install clean
    sudo ldconfig

Protoc
    sudo apt install -y protobuf-compiler
    sudo apt install -y protobuf-compiler

gRPC
  go get -u google.golang.org/protobuf/cmd/protoc-gen-go
  go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
  go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
  go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

grpcproxy
  git clone github.com/improbable-eng/grpc-web.git
  cd go/grpcwebproxy
  go build
  cp grpcwebproxy ~/globulario/services/bin/
  sudo chmod +x  ~/globulario/services/bin/grpcwebproxy

Now globular...

    mkdir globulario
    cd globulario
    
    git clone https://github.com/globulario/Globular.git
    git clone https://github.com/globulario/services.git
    git clone https://github.com/davecourtois/Utility.git

from globulario
    cd services
    sh generateCode.sh
    cd golang
    go mod tidy

from globulario
    go mod tidy
    go build
